
apply from: file('environment.gradle')
apply from: "${niagara_home}/etc/gradle/idea.gradle"

gradle.beforeProject { p ->
  configure(p) {
    def vendorSettings = file("${rootDir}/vendor.gradle")
    if (vendorSettings.exists()) {
      apply from: vendorSettings
    }
    apply from: "${niagara_home}/etc/gradle/niagara.gradle"
  }
  project.ext['niagara.signing.enabled'] = true
}

subprojects { Project p ->
  p.pluginManager.withPlugin('com.tridium.niagara-module') {
    p.niagaraModule {
      certAlias = "Niagara4Modules"
    }
  }
}

tasks.addRule("""
Pattern: [jar[Test]|clean|<any gradle task>]/[path]: Run a Gradle task against a set of modules rooted at path.
""") { String taskName ->
  def matcher = taskName =~ /(.*?)(Test)?\/(.*)/
  if (matcher) {
    def command = matcher.group(1)
    def includeTestModules = matcher.group(2) == 'Test'
    def path = file("${projectDir}/${matcher.group(3)}").toPath()

    assert path.toFile().exists()
    def targetProjects = subprojects.findAll { it.projectDir.toPath().startsWith(path) }

    // default is build command and build is an alias for Gradle's jar task
    if (command.isEmpty() || command == 'build') { command = 'jar' }

    // Create task for subproject
    task(taskName, dependsOn: targetProjects.tasks[command])
    if (includeTestModules && command == 'jar') {
      tasks[taskName].dependsOn targetProjects.moduleTestJar
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.4.1'
}
